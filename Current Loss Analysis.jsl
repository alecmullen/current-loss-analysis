Names Default To Here(1);::this_dir = Get Current Directory();cla = Run Program( Executable( "Users/alecmullen/anaconda3/bin/python3" ), Options({::this_dir||"current-loss-analysis.py" }));List to String = Function({l},	s = "["||Concat Items(l, ", ")||"]";);cla << Read();::dt = :DateTime << Get Values(Format ("Locale Date Time h:m:s"));cla << Write("['"||Concat Items(::dt, "', '")||"']"||"\!n");cla << Read();::wl = :WL << Get Values(Format (Best));cla << Write(List to String(::wl)||"\!n");cla << Read();::qe = :QE << Get Values(Format (Best));cla << Write(List to String(::qe)||"\!n");cla << Read();::bg = :Bandgap << Get Values(Format (Best));cla << Write(List to String(::bg)||"\!n");cla << Read();cla << Write("Users/alecmullen/current-loss-analysis/AM1.5G.xlsx"||"\!n");cla << Read();testDialog = Dialog(       Title( "Current Loss Analysis" ),       Vlist(              " ",              Hlist(                     Vlist( Hlist( "                                " ) ),                     Vlist(                           HList( "Please Enter QE Test DateTime" ),                           HList(" "),                           HList(                                  VList( "Time Entry:", " "  ),                                  VList(                                         StartTimeEntry = EditText( Format( today(), "m/d/y h:m:s" ) ),                                         " ",                                   ),                            ),                      ),               ),                           VList( " " ),                                 Hlist( Button( "OK" ), Button( "Cancel" ) )       )); If( testDialog["Button"] == -1,       Throw( "Canceled" )); Remove From( testDialog );Eval List( testDialog );cla << Write(StartTimeEntry||"\!n");::out = cla << Read();While (!Contains(::out, "["),	Wait(0);	::out = cla << Read(););::out = Substr(::out, Contains(::out, "["));::wl_data_string = "";While(!Contains(::out, "Best Fits"),	Wait(0);	::wl_data_string = ::wl_data_string||::out;	::out = cla << Read(););::wl_data_string = ::wl_data_string||Substr(::out, 0, Contains(::out, "]"));::out = Substr(::out, Contains(::out, "Best Fits"));::out = Substr(::out, Contains(::out, "["));::bf_data_string = "";While(!Contains(::out, "Convolution"),	Wait(0);	::bf_data_string = ::bf_data_string||::out;	::out = cla << Read(););::bf_data_string = ::bf_data_string||Substr(::out, 0, Contains(::out, "]"));::out = Substr(::out, Contains(::out, "Convolution"));::out = Substr(::out, Contains(::out, "["));::conv_data_string = "";While(!Contains(::out, "AM15G"),	Wait(0);	::conv_data_string = ::conv_data_string||::out;	::out = cla << Read(););::conv_data_string = ::conv_data_string||Substr(::out, 0, Contains(::out, "]"));::out = Substr(::out, Contains(::out, "AM15G"));::out = Substr(::out, Contains(::out, "["));::am_data_string = "";While(!Contains(::out, "Current Loss"),	Wait(0);	::am_data_string = ::am_data_string||::out;	::out = cla << Read(););::am_data_string = ::am_data_string||Substr(::out, 0, Contains(::out, "]"));::out = Substr(::out, Contains(::out, "Current Loss"));::current_loss_string = "";While(!Contains(::out, "Current Generated"),	Wait(0);	::current_loss_string = ::current_loss_string||::out;	::out = cla << Read(););::current_loss_string = ::current_loss_string||Substr(::out, 0, Contains(::out, "m^2") + 2);::out = Substr(::out, Contains(::out, "Current Generated"));::current_string = "";While(!Contains(::out, "Critical Points"),	Wait(0);	::current_string = ::current_string||::out;	::out = cla << Read(););::current_string = ::current_string||Substr(::out, 0, Contains(::out, "m^2") + 2);::out = Substr(::out, Contains(::out, "Critical Points"));::out = Substr(::out, Contains(::out, "["));::cpt_data_string = "";While(!Contains(::out, "Current Loss Partitioned"),	Wait(0);	::cpt_data_string = ::cpt_data_string||::out;	::out = cla << Read(););::cpt_data_string = ::cpt_data_string||Substr(::out, 0, Contains(::out, "]"));::out = Substr(::out, Contains(::out, "Current Loss Partitioned"));::out = Substr(::out, Contains(::out, "["));::cl_part_data_string = "";While(!Contains(::out, "Current Generated Partitioned"),	Wait(0);	::cl_part_data_string = ::cl_part_data_string||::out;	::out = cla << Read(););::cl_part_data_string = ::cl_part_data_string||Substr(::out, 0, Contains(::out, "]"));::out = Substr(::out, Contains(::out, "Current Generated Partitioned"));::out = Substr(::out, Contains(::out, "["));::curr_part_data_string = "";While(!Contains(::out, "]"),	Wait(0);	::curr_part_data_string = ::curr_part_data_string||::out;	::out = cla << Read(););::curr_part_data_string = ::curr_part_data_string||Substr(::out, 0, Contains(::out, "]"));String to List = Function({s},	l = {};	s = Substr(s, Contains(s, "[") + 1);	While (Contains(s, ","),		Wait(0);		Insert Into(l, Num(Substr(s, 0, Contains(s, ",") - 1)));		s = Substr(s, Contains(s, " ") + 1);	);	Insert Into(l, Num(Substr(s, 0, Contains(s, "]") - 1)));	l;);::wl_data = String to List(::wl_data_string);::bf_data = String to List(::bf_data_string);::conv_data = String to List(::conv_data_string);::am_data = String to List(::am_data_string);::cpt_data = String to List(::cpt_data_string);::cl_part_data = String to List(::cl_part_data_string);::curr_part_data = String to List(::curr_part_data_string);dt1 = current data table();dt2 = new table();dt2 << Set Name("Best Fit");dt2 << new column("WL", numeric); column(dt2,1) << set values(wl_data); dt2 << new column("Best Fit QE", numeric); column(dt2,2) << set values(bf_data);dt2 << new column("Electrons/(s*m^2)", numeric);column(dt2,3) << set values(conv_data);dt2 << new column("AM15G Photons/(s*m^2)", numeric);column(dt2,4) << set values(am_data);dt3 = dt2 << Join(	With(dt1),	By Matching Columns( :WL = :WL ),    Drop multiples( 0, 0 ),    Include nonmatches(1, 0),	Preserve main table order( 1 ));close(dt2);For Each Row( Row State() = Selected State(!isMissing(:DateTime) & :DateTime != Num(StartTimeEntry)) );dt3 << delete rows();dt3 << delete column(:DateTime);dt3 << new column("Total Current Density Loss A/m^2", numeric);::cl = Substr(::current_loss_string, Contains(::current_loss_string, ": ") + 2);::cl = Substr(::cl, 0, Contains(::cl, " ") - 1);::current_loss = Num(::cl);::cl_list = {};For Each Row(dt3, Insert Into(::cl_list, ::current_loss));Column(dt3, "Total Current Density Loss A/m^2") << Set Values(::cl_list);dt3 << new column("Total Current Density A/m^2", numeric);::curr = Substr(::current_string, Contains(::current_string, ": ") + 2);::curr = Substr(::curr, 0, Contains(::curr, " ") - 1);::current = Num(::curr);::curr_list = {};For Each Row(dt3, Insert Into(::curr_list, ::current));Column(dt3, "Total Current Density A/m^2") << Set Values(::curr_list);j = 360;For (i = 1, i <= 6, i++,	Wait(0);	::col_name = "Current Density Loss "||char(j)||"-"||char(cpt_data[i]);	dt3 << new column(::col_name, numeric);	::current_loss = cl_part_data[i];	::cl_list = {};	For Each Row(dt3, Insert Into(::cl_list, ::current_loss));	Column(dt3, ::col_name) << Set Values(::cl_list);	::col_name = "Current Density "||char(j)||"-"||char(cpt_data[i]);	dt3 << new column(::col_name, numeric);	::current = curr_part_data[i];	::curr_list = {};	For Each Row(dt3, Insert Into(::curr_list, ::current));	Column(dt3, ::col_name) << Set Values(::curr_list);		j = cpt_data[i];);::col_name = "Current Density Loss "||char(j)||"-"||char(1300);dt3 << new column(::col_name, numeric);::current_loss = cl_part_data[7];::cl_list = {};For Each Row(dt3, Insert Into(::cl_list, ::current_loss));Column(dt3, ::col_name) << Set Values(::cl_list);::col_name = "Current Density "||char(j)||"-"||char(1300);dt3 << new column(::col_name, numeric);::current = curr_part_data[7];::curr_list = {};For Each Row(dt3, Insert Into(::curr_list, ::current));Column(dt3, ::col_name) << Set Values(::curr_list);dt3 << Set Name(StartTimeEntry||" Current Loss Analysis");dialog(Title("Current Loss Added to Table"), ::current_loss_string, ::current_string);Graph Builder(	Variables(		X( :WL of Best Fit ),		Y( :Name( "AM15G Photons/(s*m^2)" ) ),		Y( :Name( "Electrons/(s*m^2)" ), Position( 1 ) )	),	Elements( Points( X, Y( 1 ), Y( 2 ), Legend( 11 ) ) ),	SendToReport(		Dispatch(			{},			"graph title",			TextEditBox,			{Set Text( "AM15G Photons/(s*m^2) & Electrons/(s*m^2) vs. WL" )}		),		Dispatch( {}, "X title", TextEditBox, {Set Text( "WL" )} )	));Graph Builder(	Variables( X( :WL of Best Fit ), Y( :Best Fit QE ), Y( :QE, Position( 1 ) ) ),	Elements( Points( X, Y( 1 ), Y( 2 ), Legend( 21 ) ) ),	SendToReport(		Dispatch(			{},			"graph title",			TextEditBox,			{Set Text( "Best Fit QE & QE vs. WL" )}		),		Dispatch( {}, "X title", TextEditBox, {Set Text( "WL" )} )	));