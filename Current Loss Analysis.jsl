Names Default To Here(1);//*************|||||||||||||||*************//*************|||SET PATHS|||*************//*************vvvvvvvvvvvvvvv*************//If PYTHONPATH or PYSCRIPTPATH have spaces, encapsulate path in quotes using JSL escape character (\!"): //				e.g. "\!"C:\Users\alecmullen\Current Loss\current-loss-analysis.py\!""// For Excel file do NOT do this://				e.g. "C:\Users\alecmullen\Current Loss\AM1.5G.xlsx"//AM1.5G Excel File:::AM15GPATH = "Users/alecmullen/current-loss-analysis/AM1.5G.xlsx";//Python 3 Executable:::PYTHONPATH = "Users/alecmullen/anaconda3/bin/python3";//Python Current Loss Analysis Script:::PYSCRIPTPATH = "Users/alecmullen/current-loss-analysis/current-loss-analysis.py";//SPEC:// AM15G Excel File: First column is Wavelength(WL), second is #photons/(s * m^2 * nm)//					 First Row are just column labels (they are ignored)// JMP QE Table    : Necessary columns = WL, QE, Bandgap//					 WL range = [360, 1300]// Uses Python3 to run current-loss-analyis.py. Python script uses piecewise best fit of QE data. Partitions are based // on absorption patterns of materials used and changes in slope of raw QE data. Best fit is convolved w/ AM1.5G to // calculate overall current generated and current loss, as well as current generated and current loss for each // partition. This script sends and receives data from python and plots results.//Run Python scriptcla = Run Program( Executable( ::PYTHONPATH ), Options({::PYSCRIPTPATH}));//Converts JSL list to string for python to parseList to String = Function({l},	s = "["||Concat Items(l, ", ")||"]";);//Prompts user for QE Test Device IDtestDialog = Dialog(       Title( "Current Loss Analysis" ),       Vlist(              " ",              Hlist(                     Vlist( Hlist( "                                " ) ),                     Vlist(                           HList( "Please Enter QE Test Device ID" ),                           HList(" "),                           HList(                                  VList( "Device ID:", " "  ),                                  VList(                                         DeviceIDEntry = EditText( ),                                         " ",                                   ),                            ),                      ),               ),                           VList( " " ),                                 Hlist( Button( "OK" ), Button( "Cancel" ) )       )); If( testDialog["Button"] == -1,       Throw( "Canceled" )); Remove From( testDialog );Eval List( testDialog );//Gets rows for device ID::selected rows = Loc(:Device ID << Get Values(), DeviceIDEntry);//Sends QE data as lists, AM15G pathcla << Read();::wl = (:WL << Get Values(Format (Best)))[::selected rows];cla << Write(List to String(::wl)||"\!n");cla << Read();::qe = (:QE << Get Values(Format (Best)))[::selected rows];cla << Write(List to String(::qe)||"\!n");cla << Read();::bg = (:Bandgap << Get Values(Format (Best)))[::selected rows] ;cla << Write(List to String(::bg)||"\!n");cla << Read();cla << Write(::AM15GPATH ||"\!n");::out = cla << Read();While (!Contains(::out, "["),	Wait(0);	::out = cla << Read(););::out = Substr(::out, Contains(::out, "["));//Gets WL (for best fit)::wl_data_string = "";While(!Contains(::out, "Best Fits"),	Wait(0);	::wl_data_string = ::wl_data_string||::out;	::out = cla << Read(););::wl_data_string = ::wl_data_string||Substr(::out, 0, Contains(::out, "Best Fits") - 1);::out = Substr(::out, Contains(::out, "Best Fits"));::out = Substr(::out, Contains(::out, "["));//Gets Best Fit QE::bf_data_string = "";While(!Contains(::out, "Convolution"),	Wait(0);	::bf_data_string = ::bf_data_string||::out;	::out = cla << Read(););::bf_data_string = ::bf_data_string||Substr(::out, 0, Contains(::out, "Convolution") - 1);::out = Substr(::out, Contains(::out, "Convolution"));::out = Substr(::out, Contains(::out, "["));//Gets Convolution of Best Fit w/ AM15G::conv_data_string = "";While(!Contains(::out, "AM15G"),	Wait(0);	::conv_data_string = ::conv_data_string||::out;	::out = cla << Read(););::conv_data_string = ::conv_data_string||Substr(::out, 0, Contains(::out, "AM15G") - 1);::out = Substr(::out, Contains(::out, "AM15G"));::out = Substr(::out, Contains(::out, "["));//Get AM15G Data::am_data_string = "";While(!Contains(::out, "Current Loss"),	Wait(0);	::am_data_string = ::am_data_string||::out;	::out = cla << Read(););::am_data_string = ::am_data_string||Substr(::out, 0, Contains(::out, "Current Loss") - 1);::out = Substr(::out, Contains(::out, "Current Loss"));//Gets Total Current Loss::current_loss_string = "";While(!Contains(::out, "Current Generated"),	Wait(0);	::current_loss_string = ::current_loss_string||::out;	::out = cla << Read(););::current_loss_string = ::current_loss_string||Substr(::out, 0, Contains(::out, "m^2") + 2);::out = Substr(::out, Contains(::out, "Current Generated"));//Gets total current generated::current_string = "";While(!Contains(::out, "Critical Points"),	Wait(0);	::current_string = ::current_string||::out;	::out = cla << Read(););::current_string = ::current_string||Substr(::out, 0, Contains(::out, "m^2") + 2);::out = Substr(::out, Contains(::out, "Critical Points"));::out = Substr(::out, Contains(::out, "["));//Gets critical points used for best fit::cpt_data_string = "";While(!Contains(::out, "Current Loss Partitioned"),	Wait(0);	::cpt_data_string = ::cpt_data_string||::out;	::out = cla << Read(););::cpt_data_string = ::cpt_data_string||Substr(::out, 0, Contains(::out, "Current Loss Partitioned") - 1);::out = Substr(::out, Contains(::out, "Current Loss Partitioned"));::out = Substr(::out, Contains(::out, "["));//gets current loss for each partition::cl_part_data_string = "";While(!Contains(::out, "Current Generated Partitioned"),	Wait(0);	::cl_part_data_string = ::cl_part_data_string||::out;	::out = cla << Read(););::cl_part_data_string = ::cl_part_data_string||Substr(::out, 0, Contains(::out, "Current Generated Partitioned") - 1);::out = Substr(::out, Contains(::out, "Current Generated Partitioned"));::out = Substr(::out, Contains(::out, "["));//gets current generated for each partition::curr_part_data_string = "";While(!Contains(::out, "]"),	Wait(0);	::curr_part_data_string = ::curr_part_data_string||::out;	::out = cla << Read(););::curr_part_data_string = ::curr_part_data_string||Substr(::out, 0, Contains(::out, "]"));//Parses output from python to JSL lists of dataString to List = Function({s},	l = {};	s = Substr(s, Contains(s, "[") + 1);	While (Contains(s, ","),		Wait(0);		Insert Into(l, Num(Substr(s, 0, Contains(s, ",") - 1)));		s = Substr(s, Contains(s, " ") + 1);	);	Insert Into(l, Num(Substr(s, 0, Contains(s, "]") - 1)));	l;);::wl_data = String to List(::wl_data_string);::bf_data = String to List(::bf_data_string);::conv_data = String to List(::conv_data_string);::am_data = String to List(::am_data_string);::cpt_data = String to List(::cpt_data_string);::cl_part_data = String to List(::cl_part_data_string);::curr_part_data = String to List(::curr_part_data_string);//Table for best fit data joined w/ original QE Data tabledt1 = current data table();dt2 = new table();dt2 << Set Name("Best Fit");dt2 << new column("WL", numeric); column(dt2,1) << set values(::wl_data); dt2 << new column("Best Fit QE", numeric); column(dt2,2) << set values(::bf_data);dt2 << new column("Electrons/(s*m^2)", numeric);column(dt2,3) << set values(::conv_data);dt2 << new column("AM15G Photons/(s*m^2)", numeric);column(dt2,4) << set values(::am_data);dt3 = dt2 << Join(	With(dt1),	By Matching Columns( :WL = :WL ),    Drop multiples( 0, 0 ),    Include nonmatches(1, 0),	Preserve main table order( 1 ));close(dt2, no save);For Each Row( Row State() = Selected State(!isMissing(:Device ID) & :Device ID != DeviceIDEntry) );dt3 << delete rows();dt3 << delete column(:Device ID);dt3 << Set Name("QE Best Fit "||DeviceIDEntry);//Table for current loss partitions bar chart using repeated rows to mimic variable width bar chartdt4 = new table();dt4 << Set Name("Bar Chart Data "||DeviceIDEntry);dt4 << new column("Lower Bound WL", numeric);dt4 << new column("Upper Bound WL", numeric);::lower_list4 = {};::upper_list4 = {};dt4 << new column("Mean Current Density Loss A/m^2", numeric);::cl_list4 = {};dt4 << new column("Mean Current Density A/m^2", numeric);::curr_list4 = {};//Table to summarize current loss, generated parition totalsdt5 = new Table();dt5 << Set Name("Current Loss Analysis Summary "||DeviceIDEntry);dt5 << new column("Lower Bound WL", numeric);dt5 << new column("Upper Bound WL", numeric);::lower_list5 = {};::upper_list5 = {};dt5 << new column("Total Current Density Loss A/m^2", numeric);::cl_list5 = {};dt5 << new column("Total Current Density A/m^2", numeric);::curr_list5 = {};dt5 << new column("Mean Current Density Loss A/m^2", numeric);::mean_cl_list5 = {};dt5 << new column("Mean Current Density A/m^2", numeric);::mean_curr_list5 = {};j = 360;For (i = 1, i <= 6, i++,	Wait(0);	::int_size = ::cpt_data[i] - j;	For (k = 1, k <= ::int_size, k++,		Wait(0);		Insert Into(::cl_list4, ::cl_part_data[i] / ::int_size);		Insert Into(::curr_list4, ::curr_part_data[i] / ::int_size);		Insert Into(::lower_list4, j);		Insert Into(::upper_list4, ::cpt_data[i]);	);		Insert Into(::mean_cl_list5, ::cl_part_data[i] / ::int_size);	Insert Into(::mean_curr_list5, ::curr_part_data[i] / ::int_size);	Insert Into(::cl_list5, ::cl_part_data[i]);	Insert Into(::curr_list5, ::curr_part_data[i]);	Insert Into(::lower_list5, j);	Insert Into(::upper_list5, ::cpt_data[i]);		j = ::cpt_data[i];);::int_size = 1300 - j;For (k = 1, k <= ::int_size, k++,	Insert Into(::cl_list4, ::cl_part_data[7] / ::int_size);	Insert Into(::curr_list4, ::curr_part_data[7] / ::int_size);	Insert Into(::lower_list4, j);	Insert Into(::upper_list4, 1300););Insert Into(::mean_cl_list5, ::cl_part_data[7] / ::int_size);Insert Into(::mean_curr_list5, ::curr_part_data[7] / ::int_size);Insert Into(::cl_list5, ::cl_part_data[7]);Insert Into(::curr_list5, ::curr_part_data[7]);Insert Into(::lower_list5, j);Insert Into(::upper_list5, 1300);::cl = Substr(::current_loss_string, Contains(::current_loss_string, ": ") + 2);::cl = Substr(::cl, 0, Contains(::cl, " ") - 1);::curr = Substr(::current_string, Contains(::current_string, ": ") + 2);::curr = Substr(::curr, 0, Contains(::curr, " ") - 1);Insert Into(::mean_cl_list5, Num(::cl) / 940);Insert Into(::mean_curr_list5, Num(::curr) / 940);Insert Into(::cl_list5, Num(::cl));Insert Into(::curr_list5, Num(::curr));Insert Into(::lower_list5, 360);Insert Into(::upper_list5, 1300);Column(dt4, "Upper Bound WL") << Set Values(::upper_list4);Column(dt4, "Lower Bound WL") << Set Values(::lower_list4);Column(dt4, "Mean Current Density Loss A/m^2") << Set Values(::cl_list4);Column(dt4, "Mean Current Density A/m^2") << Set Values(::curr_list4);Column(dt5, "Upper Bound WL") << Set Values(::upper_list5);Column(dt5, "Lower Bound WL") << Set Values(::lower_list5);Column(dt5, "Total Current Density Loss A/m^2") << Set Values(::cl_list5);Column(dt5, "Total Current Density A/m^2") << Set Values(::curr_list5);Column(dt5, "Mean Current Density Loss A/m^2") << Set Values(::mean_cl_list5);Column(dt5, "Mean Current Density A/m^2") << Set Values(::mean_curr_list5);dt3 << Delete Table Property("Current Loss Analysis");dialog(Title("Current Loss Added to Table"), ::current_loss_string, ::current_string);//Dashboard w/ best fit, electron flux vs AM15G, and current loss partition graphsCurrent Data Table(dt3);JMP App(	Set Name( "Current Loss Analysis "||DeviceIDEntry),	Set Description( "Four reports arranged in a grid" ),	Auto Launch( 1 ),	Snap To Grid( 1 ),	Show Grid( 1 ),	Show Properties( 0 ),	Show Sources( 1 ),	Group By Category( 0 ),	Dashboard Mode( 1 ),	Parameters,	Tables(		DataTable1 = dt3,		DataTable2 = dt4	),	Thumbnail(		New Image(			Char To Blob(				"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",				"base64compressed"			),			"png"		)	),	Script(JSL Quote(// This script is executed when the application is run.// Named objects have been created for the application modules// (for example, "Module1") and the pre-defined object// "thisApplication" refers to the application object itself.// Variables and functions declared here are scoped to the// Application namespace.)	),	Allocate(		Module1 = Plan(			PreAllocate,			Script(JSL Quote(				thisModuleInstance << Create Objects;				Try(MainTabPage << Set Scriptable Object(thisApplication));			)			),			Allocate(				MainTabPage = Tab Page Box();				Splitter1 = H Splitter Box();				Splitter2 = V Splitter Box();				TabPage1 = Tab Page Box();				Scroll1 = Scroll Box();				Report1 = Platform(					DataTable1,					Graph Builder(						Size( 459, 400 ),						Show Control Panel( 0 ),						Fit to Window( "Maintain Aspect Ratio" ),						Variables(							X( :WL of Best Fit ),							Y( :Best Fit QE ),							Y( :QE, Position( 1 ) )						),						Elements( Points( X, Y( 1 ), Y( 2 ), Legend( 9 ) ) ),						SendToReport(							Dispatch(								{},								"graph title",								TextEditBox,								{Set Text( "Best Fit QE & QE vs. WL" )}							),							Dispatch(								{},								"X title",								TextEditBox,								{Set Text( "WL" )}							)						)					)				);				Splitter3 = V Splitter Box();				TabPage2 = Tab Page Box();				Scroll2 = Scroll Box();				Report2 = Platform(					DataTable1,					Graph Builder(						Size( 280, 292 ),						Show Control Panel( 0 ),						Fit to Window( "Maintain Aspect Ratio" ),						Variables(							X( :WL of Best Fit ),							Y( :Name( "AM15G Photons/(s*m^2)" ) ),							Y( :Name( "Electrons/(s*m^2)" ), Position(1) )						),						Elements( Points( X, Y( 1 ), Y( 2 ), Legend( 12 ) ) ),						SendToReport(							Dispatch(								{},								"graph title",								TextEditBox,								{Set Text(									"AM15G Photons/(s*m^2) & Electrons/(s*m^2) vs. WL"								)}							),							Dispatch(								{},								"X title",								TextEditBox,								{Set Text( "WL" )}							),							Dispatch(								{},								"Y title",								TextEditBox,								{Set Text( "Particles/(s*m^2)" )}							)						)					)				);				TabPage3 = Tab Page Box();				Scroll3 = Scroll Box();				Report3 = Platform(					DataTable2,					Current Data Table(dt4);					Graph Builder(						Size( 257, 292 ),						Show Control Panel( 0 ),						Fit to Window( "Maintain Aspect Ratio" ),						Variables(							X(								Transform Column(									"Row+360",									Formula( Row() + 360 )								)							),							Y( :Name( "Mean Current Density A/m^2" ) ),							Y(								:Name( "Mean Current Density Loss A/m^2" ),								Position( 1 )							)						),						Elements(							Bar(								X,								Y( 1 ),								Y( 2 ),								Legend( 6 ),								Bar Style( "Stacked" )							)						),						SendToReport(							Dispatch(								{},								"graph title",								TextEditBox,								{Set Text(									"Mean Current Density A/m^2 & Mean Current Density Loss A/m^2 vs. WL"								)}							),							Dispatch(								{},								"X title",								TextEditBox,								{Set Text( "WL" )}							),							Dispatch(								{},								"Y title",								TextEditBox,								{Set Text( "Mean Current Density A/m^2" )}							)						)					)				);			),			Organize(				Reparent( Scroll3( Report3 ) );				Reparent( TabPage3( Scroll3 ) );				Reparent( Splitter3( TabPage3 ) );				Reparent( Scroll2( Report2 ) );				Reparent( TabPage2( Scroll2 ) );				Reparent( Splitter3( TabPage2 ) );				Reparent( Splitter1( Splitter3 ) );				Placeholder( Splitter2 );				Reparent( Scroll1( Report1 ) );				Reparent( TabPage1( Scroll1 ) );				Reparent( Splitter2( TabPage1 ) );				Reparent( Splitter1( Splitter2 ) );				Reparent( MainTabPage( Splitter1 ) );				Relocate( MainTabPage( 0, 0 ) );			),			Initialize(				MainTabPage << Background Color( 2147483647 ),				MainTabPage << Border(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				MainTabPage << Enabled( 1 ),				MainTabPage << Horizontal Alignment( "Default" ),				MainTabPage << Margin(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				MainTabPage << Padding(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				MainTabPage << Text Color( 2147483647 ),				MainTabPage << Vertical Alignment( "Default" ),				MainTabPage << Visibility( "Visible" ),				MainTabPage << Title( "Dashboard" ),				MainTabPage << Tip( "" ),				MainTabPage << Icon( "" ),				MainTabPage << Closeable( 0 ),				MainTabPage << Moveable( 0 ),				Splitter1 << Background Color( 2147483647 ),				Splitter1 << Border(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter1 << Enabled( 1 ),				Splitter1 << Horizontal Alignment( "Default" ),				Splitter1 << Margin(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter1 << Padding(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter1 << Text Color( 2147483647 ),				Splitter1 << Vertical Alignment( "Default" ),				Splitter1 << Visibility( "Visible" ),				Splitter1 << Dockable( 1 ),				Splitter1 << Set Width( 1280 ),				Splitter1 << Set Height( 643 ),				Splitter1 << Set Sizes( {0.446615491974878, 0.553384508025122} ),				Splitter1 << set horizontal( 1 ),				Splitter1 << Set Min Size( 571, 267 ),				Splitter1 << Set Max Size( 60003, 60003 ),				Splitter1 << Set Auto Stretching( 1, 1 ),				Splitter2 << Background Color( 2147483647 ),				Splitter2 << Border(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter2 << Enabled( 1 ),				Splitter2 << Horizontal Alignment( "Default" ),				Splitter2 << Margin(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter2 << Padding(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter2 << Text Color( 2147483647 ),				Splitter2 << Vertical Alignment( "Default" ),				Splitter2 << Visibility( "Visible" ),				Splitter2 << Dockable( 1 ),				Splitter2 << Set Width( 571 ),				Splitter2 << Set Height( 643 ),				Splitter2 << Set Sizes( {0.714285714285714, 0.285714285714286} ),				Splitter2 << set horizontal( 0 ),				Splitter2 << Set Min Size( 211, 106 ),				Splitter2 << Set Max Size( 30000, 30004 ),				Splitter2 << Set Auto Stretching( 1, 1 ),				TabPage1 << Background Color( 2147483647 ),				TabPage1 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				TabPage1 << Enabled( 1 ),				TabPage1 << Horizontal Alignment( "Default" ),				TabPage1 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				TabPage1 << Padding(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				TabPage1 << Text Color( 2147483647 ),				TabPage1 << Vertical Alignment( "Default" ),				TabPage1 << Visibility( "Visible" ),				TabPage1 << Title( "Graph Builder" ),				TabPage1 << Tip( "" ),				TabPage1 << Icon( "Trellis" ),				TabPage1 << Closeable( 1 ),				TabPage1 << Moveable( 1 ),				Scroll1 << Background Color( 2147483647 ),				Scroll1 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll1 << Enabled( 1 ),				Scroll1 << Horizontal Alignment( "Default" ),				Scroll1 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll1 << Padding( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll1 << Text Color( 2147483647 ),				Scroll1 << User Resizable( {1, 1} ),				Scroll1 << Vertical Alignment( "Default" ),				Scroll1 << Visibility( "Visible" ),				Scroll1 << Width( 571 ),				Scroll1 << Height( 613 ),				Scroll1 << Set Auto Scrollable( 1 ),				Scroll1 << Set Scrollers( 0, 0 ),				Scroll1 << Set Background Color( 2147483647 ),				Scroll1 << Set Show Empty( 0 ),				Scroll1 << Set Clip Printing( 0 ),				Scroll1 << Set Min Size( 211, 76 ),				Scroll1 << Set Max Size( 30111, 30001 ),				Scroll1 << Set Auto Stretching( 1, 1 ),				Report1 << Background Color( 2147483647 ),				Report1 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report1 << Enabled( 1 ),				Report1 << Horizontal Alignment( "Default" ),				Report1 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report1 << Padding( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report1 << Text Color( 2147483647 ),				Report1 << Vertical Alignment( "Default" ),				Report1 << Visibility( "Visible" ),				Report1 << set horizontal( 0 ),				Splitter3 << Background Color( 2147483647 ),				Splitter3 << Border(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter3 << Enabled( 1 ),				Splitter3 << Horizontal Alignment( "Default" ),				Splitter3 << Margin(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter3 << Padding(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				Splitter3 << Text Color( 2147483647 ),				Splitter3 << Vertical Alignment( "Default" ),				Splitter3 << Visibility( "Visible" ),				Splitter3 << Dockable( 1 ),				Splitter3 << Set Width( 706 ),				Splitter3 << Set Height( 643 ),				Splitter3 << Set Sizes( {0.498956158663883, 0.501043841336117} ),				Splitter3 << set horizontal( 0 ),				Splitter3 << Set Min Size( 357, 267 ),				Splitter3 << Set Max Size( 30000, 60003 ),				Splitter3 << Set Auto Stretching( 1, 1 ),				TabPage2 << Background Color( 2147483647 ),				TabPage2 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				TabPage2 << Enabled( 1 ),				TabPage2 << Horizontal Alignment( "Default" ),				TabPage2 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				TabPage2 << Padding(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				TabPage2 << Text Color( 2147483647 ),				TabPage2 << Vertical Alignment( "Default" ),				TabPage2 << Visibility( "Visible" ),				TabPage2 << Title( "Graph Builder" ),				TabPage2 << Tip( "" ),				TabPage2 << Icon( "Trellis" ),				TabPage2 << Closeable( 1 ),				TabPage2 << Moveable( 1 ),				Scroll2 << Background Color( 2147483647 ),				Scroll2 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll2 << Enabled( 1 ),				Scroll2 << Horizontal Alignment( "Default" ),				Scroll2 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll2 << Padding( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll2 << Text Color( 2147483647 ),				Scroll2 << User Resizable( {1, 1} ),				Scroll2 << Vertical Alignment( "Default" ),				Scroll2 << Visibility( "Visible" ),				Scroll2 << Width( 706 ),				Scroll2 << Height( 294 ),				Scroll2 << Set Auto Scrollable( 1 ),				Scroll2 << Set Scrollers( 0, 0 ),				Scroll2 << Set Background Color( 2147483647 ),				Scroll2 << Set Show Empty( 0 ),				Scroll2 << Set Clip Printing( 0 ),				Scroll2 << Set Min Size( 292, 95 ),				Scroll2 << Set Max Size( 30192, 30001 ),				Scroll2 << Set Auto Stretching( 1, 1 ),				Report2 << Background Color( 2147483647 ),				Report2 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report2 << Enabled( 1 ),				Report2 << Horizontal Alignment( "Default" ),				Report2 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report2 << Padding( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report2 << Text Color( 2147483647 ),				Report2 << Vertical Alignment( "Default" ),				Report2 << Visibility( "Visible" ),				Report2 << set horizontal( 0 ),				TabPage3 << Background Color( 2147483647 ),				TabPage3 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				TabPage3 << Enabled( 1 ),				TabPage3 << Horizontal Alignment( "Default" ),				TabPage3 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				TabPage3 << Padding(					{Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )}				),				TabPage3 << Text Color( 2147483647 ),				TabPage3 << Vertical Alignment( "Default" ),				TabPage3 << Visibility( "Visible" ),				TabPage3 << Title( "Graph Builder" ),				TabPage3 << Tip( "" ),				TabPage3 << Icon( "Trellis" ),				TabPage3 << Closeable( 1 ),				TabPage3 << Moveable( 1 ),				Scroll3 << Background Color( 2147483647 ),				Scroll3 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll3 << Enabled( 1 ),				Scroll3 << Horizontal Alignment( "Default" ),				Scroll3 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll3 << Padding( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Scroll3 << Text Color( 2147483647 ),				Scroll3 << User Resizable( {1, 1} ),				Scroll3 << Vertical Alignment( "Default" ),				Scroll3 << Visibility( "Visible" ),				Scroll3 << Width( 706 ),				Scroll3 << Height( 294 ),				Scroll3 << Set Auto Scrollable( 1 ),				Scroll3 << Set Scrollers( 0, 0 ),				Scroll3 << Set Background Color( 2147483647 ),				Scroll3 << Set Show Empty( 0 ),				Scroll3 << Set Clip Printing( 0 ),				Scroll3 << Set Min Size( 357, 117 ),				Scroll3 << Set Max Size( 30257, 30001 ),				Scroll3 << Set Auto Stretching( 1, 1 ),				Report3 << Background Color( 2147483647 ),				Report3 << Border( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report3 << Enabled( 1 ),				Report3 << Horizontal Alignment( "Default" ),				Report3 << Margin( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report3 << Padding( {Left( 0 ), Top( 0 ), Right( 0 ), Bottom( 0 )} ),				Report3 << Text Color( 2147483647 ),				Report3 << Vertical Alignment( "Default" ),				Report3 << Visibility( "Visible" ),				Report3 << set horizontal( 0 )			)		)	),	Initialize(		Module1 << Auto Launch( 1 );		Module1 << Set Module Type( "Report" );		Module1 << Set Window Title( "^TABLENAME - ^APPNAME" );		Module1 << Set Min Size( 0, 0 );		Module1 << Set Max Size( 30000, 30000 );		Module1 << Set Auto Stretching( ., . );	)) << Run